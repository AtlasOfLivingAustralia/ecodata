"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String! = "No longer supported"
) on FIELD_DEFINITION | ENUM_VALUE

type ActivityForm {
    name: String
}

type Organisation {
    organisationId: String
    name: String
    acronym: String
    abn: String

}

type AssociatedOrg {
    name: String
    description: String
    fromDate: Date
    toDate: Date
    organisation: Organisation
}

"Validation Errors"
type Error {
    field: String!
    message: String
}

type ExternalId {
    "The id used in the external system"
    externalId: String
    "Identifies the system this externaId is used in"
    idType: IdType
}

type ManagementUnit {
    name: String
    description: String
}

type MeriPlan {
    lastUpdated: Date
    publicationStatus: PublicationStatus

    firstNationsPeopleInvolvement: String

    supportedPriorityPlaces: [String]
    "Environmental assets the Project is investing in protected"
    investmentPriorities: [String]
    "Project specific outcomes that are planned to be achieved in the medium term (3-5 years)"
    midTermOutcomes: [ProjectOutcome]
    "Measurable targets the Project plans to achieve"
    outputTargets: [OutputTarget]
    "The Program outcome that is the primary outcome the Project plans to achieve"
    primaryOutcome: ProjectOutcome
    "Other Program outcomes that the Project plans to achieve"
    secondaryOutcomes: [ProjectOutcome]
    "Project specific outcomes that are planned to be achieved in the short term (1-3 years)"
    shortTermOutcomes: [ProjectOutcome]

    keyThreats: [KeyThreat]

    implementationOrDeliveryAssumptions: String
    evaluationApproach: String

    partnerships: [Partnership]

    baselines: [Baseline]
    monitoringMethodology: [MonitoringMethodology]
    approach: String

    conservationAndManagementPlans:[ManagementPlan]


}

type ManagementPlan {
    documentName: String
    documentSection: String
    strategicAlignment: String
    documentUrl: String
}

type Baseline {
    code: String
    description: String
    existsOrToBeEstablished: String
    targetMeasures: [TargetMeasure]
    emsaModules: [String]
    method: String
    evidence: String
    relatedOutcomes: [String]
}

type MonitoringMethodology {
    relatedBaseline: String
    description: String
    targetMeasures: [TargetMeasure]
    emsaModules: [String]
    method: String
    evidence: String
}

type Partnership {
    partnerName: String
    description: String
    partnerOrganisationType: String
}

type KeyThreat {
    "The code for the key threat"
    relatedOutcomes: [String]
    "A description of the key threat"
    description: String
    threatCode: String
    intervention: String
    targetMeasures: [TargetMeasure]
    evidence: String

}

type Service {
    id: Int
    name: String
}

type Activity {
    type: String
    description: String
    progress: String
    startDate: Date
    endDate: Date
    plannedStartDate: Date
    plannedEndDate: Date
    formVersion: Int
    outputs: [Output]
}

type Output {
    name: String
    service: Service
    data: OutputData
}

type OutcomeTarget {
    relatedOutcomes: [String]
    target: Float
}

type PeriodTarget {
    period: String
    target: Float
}

type OutputTarget {
    "Description"
    outcomeTargets: [OutcomeTarget]
    "Description"
    periodTargets: [PeriodTarget]
    "Description"
    target: Float
    "Description"
    targetDate: Date
    "A target measure"
    targetMeasure: TargetMeasure
}

type Program {
    "The acryonm the Program is known by"
    acronym: String
    "The name of the Program"
    name: String
    "If this Program is a sub-program, this field identifies the parent Program"
    parent: Program
    "The unique identifier for the Program"
    programId: String
}

type Project {
    dateCreated: Date
    lastUpdated: Date
    status: Status
    "A list of organisations that have a relationship with this Project.  "
    associatedOrgs: [AssociatedOrg]
    "A longer description of the Project"
    description: String
    "Used by older MERIT projects that share a grant id from a devolved grant.  "
    externalId: String
    "A list of identifiers by which this Project may be known in external systems"
    externalIds: [ExternalId]
    "Mostly unique human readable identifier used for the Project.  Projects before 2018 sometimes share a grantId when run under a devolved grant.  When projects share a grantId, they are futher distinguished  via the externalId field.  The combination of grantId and externalId must be unique"
    grantId: String
    "The identifier of the Hub that was responsible for creating the Project"
    hubId: String
    "The managed natural resource region in which the activities of this Project are taking place"
    managementUnit: ManagementUnit
    "Has a meriPlan"
    meriPlan: MeriPlan
    "A short description of the Project"
    name: String
    "The program or sub-program that is funding this Project"
    program: Program
    "Unique indentifier of a MERIT project"
    projectId: String
    "Has reports"
    reports: [Report]

    sites: [Site]
}

type Site {
    siteId: String
    name: String
    geoJson: GeoJson
}

type ProjectOutcome {
    "Description"
    assets: [String]
    "Description"
    code: String
    "Description"
    description: String
    "Description"
    relatedOutcome: String
}

type ProjectPagedResult {
    results: [Project]
    totalCount: Int
}

type Query {
    activityForm(activityFormName: String!): ActivityForm
    activityFormList(ignoreCase: Boolean, max: Int, offset: Int, order: String, sort: String): [ActivityForm]
    outputList: [Summary]
    outputTypeByName(outputTypeName: String!): Schema
    outputs(output: [output]): [Output]
    project(projectId: String!): Project
    searchManagementUnits(
        "yyyy-mm-dd"
        endDate: String,
        managementUnitId: String,
        name: String,
        "yyyy-mm-dd"
        startDate: String
    ): [ManagementUnit]
    searchMeritProjects(
        activities: [activities],
        assetsAddressed: [String],
        associatedProgram: [String],
        associatedSubProgram: [String],
        biogeographicRegion: [String],
        cmz: [String],
        federalElectorate: [String],
        "yyyy-mm-dd"
        fromDate: String,
        grantManagerNominatedProject: [YesNo],
        lga: [String],
        mainTheme: [String],
        majorVegetationGroup: [String],
        managementArea: [String],
        managementUnit: [String],
        marineRegion: [String],
        max: Int,
        meritProjectID: [String],
        myProjects: Boolean,
        organisation: [String],
        otherRegion: [String],
        page: Int,
        partnerOrganisationType: [String],
        primaryOutcome: [String],
        projectId: String,
        reports: ReportQuery,
        secondaryOutcomes: [String],
        state: [String],
        status: [String],
        tags: [String],
        "yyyy-mm-dd"
        toDate: String,
        userNominatedProject: [String]
    ): ProjectPagedResult
    sites(max: Int, page: Int, siteIds: [String], term: String!): [Site]
}

type Report {
    publicationStatus: PublicationStatus
    "category"
    category: String
    "name"
    name: String
    "The Project target measures as calculated from the data in this report"
    targetsDelivery: [TargetDelivered]
    fromDate: Date
    toDate: Date
    activity: Activity
}

type TargetDelivered {
    targetMeasure: TargetMeasure
    amountDelivered: Float
}

type TargetMeasure {
    targetMeasureId: String
    service: Service
    label: String
}

enum Status {
    APPLICATION
    ACTIVE
    COMPLETED
    DELETED
    TERMINATED
}

enum PublicationStatus {
    APPROVED
    SUBMITTED
    DRAFT
}

enum Progress {
    NOT_STARTED
    STARTED
    FINISHED
    CANCELLED
    DEFERRED
}

enum IdType {
    ARDC_RAID
    GRANT_AWARD
    GRANT_OPPORTUNITY
    INTERNAL_ORDER_NUMBER
    MONITOR_MINTED_COLLECTION_ID
    MONITOR_PLOT_GUID
    MONITOR_PLOT_SELECTION_GUID
    MONITOR_PROTOCOL_GUID
    MONITOR_PROTOCOL_INTERNAL_ID
    RELATED_PROJECT
    TECH_ONE_CODE
    TECH_ONE_CONTRACT_NUMBER
    TECH_ONE_PARTY_ID
    UNSPECIFIED
    WORK_ORDER
}

enum YesNo {
    no
    yes
}

input ReportQuery {
    "yyyy-mm-dd"
    fromDate: String
    max: Int
    page: Int
    reportId: String
    reportType: String
    publicationStatus: [String]
    "yyyy-mm-dd"
    toDate: String
}

input activities {
    activityType: String
    output: [outputInput]
}

input output {
    fields: [String]
    outputType: String!
}

input outputInput {
    outputType: String!
}

scalar Date
scalar ObjectId
scalar object
scalar Schema
scalar Summary
scalar TargetMeasure
scalar GeoJson
scalar OutputData