//import org.apache.tools.ant.filters.ReplaceTokens

import static org.springframework.boot.gradle.SpringBootPluginExtension.LayoutType.*

buildscript {
    repositories {
        mavenLocal()
        maven { url "https://nexus.ala.org.au/content/groups/public/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:$assetPipelineVersion"
        classpath 'com.bmuschko:gradle-clover-plugin:2.1.0'
       // classpath "org.grails.plugins:hibernate"
      //   classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    }
}

plugins {
//   id "com.gorylenko.gradle-git.properties" version '1.4.17'
    id "com.gorylenko.gradle-git-properties" version "2.0.0"
}

version "2.0-SNAPSHOT"
group "au.org.ala"
description "Ecodata"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin: "groovy"
apply plugin:"org.grails.grails-web"
apply plugin:"org.grails.grails-gsp"
apply plugin:"asset-pipeline"
apply plugin: 'com.bmuschko.clover'
apply from: 'https://raw.githubusercontent.com/AtlasOfLivingAustralia/travis-build-configuration/master/travis_grails_publish.gradle'

repositories {
    mavenLocal()
    maven { url "https://repo.osgeo.org/repository/release/" }
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://nexus.ala.org.au/content/groups/public/" }
    jcenter()
   // mavenCentral()
}



dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile 'javax.media:jai-core:1.1.3'
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-tomcat"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
   // compile "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
//    compile "org.grails.plugins:hibernate5"
   // compile "org.hibernate:hibernate-core:5.1.16.Final"
   // compile "org.hibernate:hibernate-ehcache:5.1.16.Final"
    compile "org.grails:grails-plugin-datasource"
    compile "org.grails:grails-plugin-databinding"
    compile 'org.grails:grails-datastore-gorm:6.1.7.RELEASE'
    compile "org.grails:grails-plugin-codecs"
    //compile 'org.grails.plugins:mongodb:7.0.0'
    compile "org.grails.plugins:mongodb:6.1.7"
    compile "org.mongodb:mongodb-driver:3.9.1"
   // provided "org.grails.plugins:embedded-mongodb:1.0.2"
   // compile "org.mongodb:mongodb-driver:3.4.2"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile "org.grails.profiles:web"

    compile 'org.grails.plugins:external-config:1.2.2'
  //  runtime "org.glassfish.web:el-impl:2.1.2-b03"
  //  runtime "com.h2database:h2"
 //   runtime "org.apache.tomcat:tomcat-jdbc"
    runtime 'com.bertramlabs.plugins:asset-pipeline-grails:3.0.10'

    compile "org.elasticsearch:elasticsearch:1.7.1"

    // https://mvnrepository.com/artifact/org.elasticsearch.client/transport
   // compile group: 'org.elasticsearch.client', name: 'transport', version: '7.0.0'

    // https://mvnrepository.com/artifact/org.elasticsearch.client/elasticsearch-rest-high-level-client
  //  compile group: 'org.elasticsearch.client', name: 'elasticsearch-rest-high-level-client', version: '7.0.0'
    /*compile "org.elasticsearch.client:elasticsearch-rest-high-level-client:7.0.0" {
        exclude module: "elasticsearch"
    }*/

  //  compile 'org.elasticsearch:elasticsearch:7.0.0'

    compile group: 'org.locationtech.spatial4j', name: 'spatial4j', version: '0.7'
    compile group: 'org.locationtech.jts', name: 'jts-core', version: '1.15.0'


  //  compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.1'
   /* compile ("org.grails.plugins:ala-auth:1.3.1") {
        exclude module: "json-lib"
    }*/
    compile "org.grails.plugins:ala-auth:3.0.3"
    compile "org.grails.plugins:ala-admin-plugin:2.1"
    runtime "org.grails.plugins:ala-bootstrap3:3.0.6"
  //  compile "org.grails.plugins:ala-ws-plugin:2.0"
    compile "au.org.ala:userdetails-service-client:1.3.0"
    compile "org.codehaus.gpars:gpars:1.1.0"
    compile "org.apache.httpcomponents:httpclient:4.5.7"
  //  compile 'org.grails.plugins:http-builder-helper:1.1.0'
    compile "org.imgscalr:imgscalr-lib:4.2"
    compile "commons-io:commons-io:2.5"
  //  compile group: 'com.github.fge', name: 'json-schema-core', version: '0.99.4'
    //compile group: 'com.github.fge', name: 'json-schema-formats', version: '2.0.0'
    compile ("com.github.fge:json-schema-validator:2.1.6")  {
        exclude module: "mailapi"
    }
    // https://mvnrepository.com/artifact/net.sf.json-lib/json-lib
   // compile group: 'net.sf.json-lib', name: 'json-lib', version: '0.8'

//    compile "org.grails.plugins:excel-export:0.2.1"
//    compile "org.grails.plugins:excel-import:1.0.1"

    compile 'org.grails.plugins:excel-import:3.0.2'
    compile 'org.grails.plugins:excel-export:2.1'
    // https://mvnrepository.com/artifact/com.vividsolutions/jts
    compile group: 'com.vividsolutions', name: 'jts', version: '1.13'
    compile "com.itextpdf:itextpdf:5.5.1"
    compile "org.apache.httpcomponents:httpmime:4.2.1"
    compile 'org.grails.plugins:csv:1.0.1'
    compile "org.geotools.xsd:gt-xsd-kml:${geoToolsVersion}"
    compile "org.geotools:gt-shapefile:${geoToolsVersion}"
    compile "org.geotools:gt-geojson:${geoToolsVersion}"
    compile "org.geotools:gt-epsg-hsql:${geoToolsVersion}"
   // compile 'com.twelvemonkeys.imageio:imageio-jpeg:3.3.2'
    compile 'org.grails.plugins:mail:2.0.0'
    compile "com.drewnoakes:metadata-extractor:2.10.1"
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'

    compile 'org.grails.plugins:quartz:2.0.13'
    // For logback filter
    compile 'org.codehaus.janino:janino:3.0.6'

   // compile "org.grails.plugins:jmx:0.9"

    //TODO: including this plugin interferes with debug watch in intellij. Need to look into another way to check MBean
//    compile 'org.grails.plugins:grails-melody-plugin:1.70.0'
    
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails.plugins:geb"
    testCompile "org.grails:grails-web-testing-support"
    testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:2.47.1"
    testRuntime "net.sourceforge.htmlunit:htmlunit:2.18"
    clover 'org.openclover:clover:4.2.0'

 //   testCompile "com.github.fakemongo:fongo:2.1.0"
 //   testCompile "org.grails:grails-test-mixins:3.3.0"

 //   testCompile "org.grails:grails-plugin-testing"
   /* testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude group: 'org.codehaus.groovy'
    }*/
}
clover {
    // Although Clover is now open source the plugin
    // still expects to find the license file.
    // Any file will work.
    licenseLocation = File.createTempFile('clover', '.license').absolutePath
    //targetPercentage = "100%"
    excludes = ['**/Application.groovy',
                '**/BootStrap.groovy',
                '**/UrlMappings.groovy',
                '**/*GrailsPlugin.groovy',
                '**/*Mock.groovy',
    ]
    // This is neededed to see which tests targeted code
    // In this particular project I'm only using Spock
    // specifications
    testIncludes = ['**/*Spec.groovy']

    // I would like to have both html and xml report
    report {
        html = true
        xml = true
    }
}

springBoot {
  //  buildInfo()
    layout = WAR
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always', '-Xmx8000m')
    addResources = true
    System.properties.each { k,v->
        if(!systemProperties[k]) {
            systemProperties[k] = v
            println "$k = $v"
        }
    }
  //  String springProfilesActive = 'spring.profiles.active'
  //  systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat 'full'
    }
}


assets {
    minifyJs = true
    minifyCss = true
}

bootRepackage {
    enabled = true
    executable = true
    classifier = 'exec'
}

publish {
    dependsOn assemble
}

